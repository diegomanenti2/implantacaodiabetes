import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import util
import data_handler
import pickle

print("Abriu a pagina")

# verifica se a senha de acesso est√° correta
if not util.check_password():
    # se a senha estiver errada, para o processamento do app
    print("Usuario nao logado")
    st.stop()
    

print("Carregou a pagina")

# Aqui come√ßa a estrutura do App que vai ser executado em produ√ß√£o (nuvem AWS)

# primeiro de tudo, carrega os dados do diabetes para um dataframe
dados = data_handler.load_data()

# carrega o modelo de predi√ß√£o j√° treinado e validado
model = pickle.load(open('./models/diabetes_model.pkl', 'rb')) 

# come√ßa a estrutura da interface do sistema
st.title('App dos dados Diabetes')

data_analyses_on = st.toggle('Exibir an√°lise dos dados')

if data_analyses_on:
    # essa parte √© s√≥ um exmplo de que √© poss√≠vel realizar diversas visualiza√ß√µes e plotagens com o streamlit
    st.header('Dados do Diabetes - Dataframe')
    
    # exibe todo o dataframe dos dados do diabetes
    st.dataframe(dados)

    # plota um histograma das idades dos passageiros
    st.header('Histograma das idades')
    fig = plt.figure()
    plt.hist(dados['Age'], bins=10)
    plt.xlabel('Idade')
    plt.ylabel('Quantidade')
    st.pyplot(fig)

    # plota um gr√°fico de barras com a contagem dos sobreviventes
    st.header('Diab√©ticos')
    st.bar_chart(dados.Outcome.value_counts())
    
# daqui em diante vamos montar a inteface para capturar os dados de input do usu√°rio para realizar a predi√ß√£o
# que vai identificar se um passageiro sobreviveu ou n√£o
st.header('Preditor da Chance de ter Diabetes')

# ler as seguintes informa√ß√µes de input:
#Pregnancies - int
#Glucose - int
#BloodPressure - int
#SkinThickness - int
#Insulin - int
#BMI - float
#DiabetesPedigreeFunction - float
#Age - int

# essas foram as informa√ß√µes utilizadas para treinar o modelo
# assim, todas essas informa√ß√µes tamb√©m devem ser passadas para o modelo realizar a predi√ß√£o

# define a linha 1 de inputs com 3 colunas
col1, col2, col3 = st.columns(3)

# captura a p_class do passageiro, com base na lista de classes dispobilizadas 
with col1:
    # Pregnancies: 
    pregnancies = st.number_input('Quantidade de Gesta√ß√µes (QTD)', step=1)

# captura Glucose
with col2:
    glocose = st.number_input('Glicose (mg/dL)', step=1)

    
# BloodPressure
with col3:
    # age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5
    bloodPressure = st.number_input('Press√£o Sanguinea (mm HG)', step=1)
    

# define a linha 2 de inputs, tamb√©m com 3 colunas
col1, col2, col3 = st.columns(3)

# SkinThickness
with col1:
    skinThickness = st.number_input('Dobra Cut√¢nea do Tr√≠ceps (mm)', step=1)

# Insulin
with col2:
    insulin = st.number_input('Insulina (UI)', step=1)

# BMI
with col3:
    bmi = st.number_input('Indice de Massa Corporal (IMC)', step=0.01)
    
    
# define a linha 3 de inputs, com 2 colunas
col1, col2,col3 = st.columns(3)

# DiabetesPedigreeFunction
with col1:
    diabetesPedigreeFunction = st.number_input('Probabilidade diabetes (0.00 - 1.00)', step=0.01)
    
# Age
with col2:
    age = st.number_input('Idade (anos)', step=1)


# define a linha 3 de inputs, com 2 colunas
col1, col2,col3 = st.columns(3)

# define o bot√£o de verificar, que dever√° ser pressionado para o sistema realizar a predi√ß√£o
with col1:
    submit = st.button('Verificar')

# armazena todos os dados do paciente nesse dict
paciente = {}
  
# verifica se o bot√£o submit foi pressionado e se o campo Diab√©tico est√° em cache
if submit or 'Diab√©tico' in st.session_state:
    
    #Valida√ß√£o das entradas
    if pregnancies < 0 :
        st.error("N√∫mero de Gravidez inv√°lido!")
        st.stop()
    
    if glocose <= 0 :
        st.error("Valor de Glicose invalido!")
        st.stop()

    if bloodPressure <= 0 :
        st.error("Valor de press√£o sanguinea invalido!")
        st.stop()

    if skinThickness <= 0 :
        st.error("Valor de Dobra Cut√¢nea do Tr√≠ceps invalido!")
        st.stop()

    if insulin <= 0 :
        st.error("Valor de Insulina invalido!")
        st.stop()
   
    if bmi <= 0 :
        st.error("Valor de IMC invalido!")
        st.stop()    

    if (diabetesPedigreeFunction<0 or diabetesPedigreeFunction>1  ) :
        st.error("Probabilidade diabetes invalido!")
        st.stop()
    
    if age < 0 :
        st.error("Idade invalida!")
        st.stop() 
 
    # seta todos os attrs do paciente. Nesse caso n√£o temos tratamentos a fazer nem vri√°veis categ√≥ricas.
    paciente = {
        "Pregnancies": pregnancies,
        "Glucose": glocose,
        "BloodPressure": bloodPressure,
        "SkinThickness": skinThickness,
        "Insulin": insulin,
        "BMI": bmi,
        "DiabetesPedigreeFunction": diabetesPedigreeFunction,
        "Age": age
    }
    print(paciente)
    
    # converte o paciente para um pandas dataframe
    # isso √© feito para igualar ao tipo de dado que foi utilizado para treinar o modelo
    values = pd.DataFrame([paciente])
    print(values) 

    # realiza a predi√ß√£o relacionadas a diabetes
    results = model.predict(values)
    print(results)
    
    # o modelo foi treinado para retornar uma lista com 0 ou 1, onde cada posi√ß√£o da lista indica se o paciente tem diabetes (1) ou n√£o (0)
    # como estamos realizando a predi√ß√£o de somente um paciente por vez, o modelo dever√° retornar somente um elemento na lista
    if len(results) == 1:
        # converte o valor retornado para inteiro
        diabetico = int(results[0])
        
        # verifica se o paciente tem diabetes
        if diabetico == 1:
            # se sim, exibe uma mensagem que o paciente tem diabetes
            st.subheader('Paciente DIAB√âTICO! üò¢')
            if 'Diab√©tico' not in st.session_state:
                st.snow()
    
        else:
            # se n√£o, exibe uma mensagem que o paciente n√£o tem diab√©tes
            st.subheader('Paciente N√ÉO DIAB√âTICO! üòÉüôåüèª')
            if 'Diab√©tico' not in st.session_state:
                st.balloons()
                
        
        # salva no cache da aplica√ß√£o se o paciente tem diabetes
        st.session_state['Diab√©tico'] = diabetico
    
    # verifica se existe um paciente e se j√° foi verificado se ele sobreviveu ou n√£o
    if paciente and 'Diab√©tico' in st.session_state:
        # se sim, pergunta ao usu√°rio se a predi√ß√£o est√° certa e salva essa informa√ß√£o
        st.write("A predi√ß√£o est√° correta?")
        col1, col2, col3 = st.columns([1,1,5])
        with col1:
            correct_prediction = st.button('üëçüèª')
        with col2:
            wrong_prediction = st.button('üëéüèª')
        
        # exibe uma mensagem para o usu√°rio agradecendo o feedback
        if correct_prediction or wrong_prediction:
            message = "Muito obrigado pelo feedback"
            if wrong_prediction:
                message += ", iremos usar esses dados para melhorar as predi√ß√µes"
            message += "."
            
            # adiciona no dict do passageiro se a predi√ß√£o est√° correta ou n√£o
            if correct_prediction:
                paciente['CorrectPrediction'] = True
            elif wrong_prediction:
                paciente['CorrectPrediction'] = False
                
            # adiciona no dict do passageiro se ele sobreviveu ou n√£o
            paciente['Diab√©tico'] = st.session_state['Diab√©tico']
            
            # escreve a mensagem na tela
            st.write(message)
            print(message)
            
            # salva a predi√ß√£o no JSON para c√°lculo das m√©tricas de avalia√ß√£o do sistema
            data_handler.save_prediction(paciente)
            
    st.write('')
    # adiciona um bot√£o para permitir o usu√°rio realizar uma nova an√°lise
    col1, col2, col3 = st.columns(3)
    with col2:
        new_test = st.button('Iniciar Nova An√°lise')
        
        # se o usu√°rio pressionar no bot√£o e j√° existe um passageiro, remove ele do cache
        if new_test and 'Diab√©tico' in st.session_state:
            del st.session_state['Diab√©tico']
            st.rerun()

# calcula e exibe as m√©tricas de avalia√ß√£o do modelo
# aqui, somente a acur√°ria est√° sendo usada
accuracy_predictions_on = st.toggle('Exibir acur√°cia')

if accuracy_predictions_on:
    # pega todas as predi√ß√µes salvas no JSON
    predictions = data_handler.get_all_predictions()
    # salva o n√∫mero total de predi√ß√µes realizadas
    num_total_predictions = len(predictions)
    
    # calcula o n√∫mero de predi√ß√µes corretas e salva os resultados conforme as predi√ß√µes foram sendo realizadas
    accuracy_hist = [0]
    # salva o numero de predi√ß√µes corretas
    correct_predictions = 0
    # percorre cada uma das predi√ß√µes, salvando o total m√≥vel e o n√∫mero de predi√ß√µes corretas
    for index, paciente in enumerate(predictions):
        total = index + 1
        if paciente['CorrectPrediction'] == True:
            correct_predictions += 1
            
        # calcula a acurracia movel
        temp_accuracy = correct_predictions / total if total else 0
        # salva o valor na lista de historico de acuracias
        accuracy_hist.append(round(temp_accuracy, 2)) 
    
    # calcula a acuracia atual
    accuracy = correct_predictions / num_total_predictions if num_total_predictions else 0
    
    # exibe a acuracia atual para o usu√°rio
    st.metric(label='Acur√°cia', value=round(accuracy, 2))
    # TODO: usar o attr delta do st.metric para exibir a diferen√ßa na varia√ß√£o da acur√°cia
    
    # exibe o hist√≥rico da acur√°cia
    st.subheader("Hist√≥rico de acur√°cia")
    st.line_chart(accuracy_hist)
    
